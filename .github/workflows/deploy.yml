name: Deploy to EC2

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
    types: [ closed ]

jobs:
  deploy:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '23'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build Angular application
      run: npm run build
      
    - name: Create deployment package
      run: |
        cd dist/admin
        tar -czf ../../admin-build.tar.gz .
        cd ../..
        
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Create deployment directory if it doesn't exist
          sudo mkdir -p /home/ubuntu/admin
          sudo chown ubuntu:ubuntu /home/ubuntu/admin
          
          # Backup current deployment
          if [ -d "/home/ubuntu/admin" ]; then
            sudo mv /home/ubuntu/admin /home/ubuntu/admin/backup-$(date +%Y%m%d-%H%M%S)
          fi
          
          # Create new deployment directory
          mkdir -p /home/ubuntu/admin
          
    - name: Copy files to EC2
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        source: "admin-build.tar.gz"
        target: "/home/ubuntu/admin/"
        
    - name: Extract and setup application
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          cd /home/ubuntu/admin
          
          # Extract the build
          tar -xzf admin-build.tar.gz -C .
          
          # Clean up
          rm admin-build.tar.gz
          
          # Set proper permissions
          sudo chown -R www-data:www-data .
          sudo chmod -R 755 .
          
          # Restart web server (adjust based on your setup)
          sudo systemctl reload nginx || sudo systemctl reload apache2 || echo "No web server to reload"
          
          echo "Deployment completed successfully!"